class Config(object):
    def __init__(
        self,
        max_height=224,
        max_width=224,
        max_depth=21,
        max_time=5,
        num_channels=3,
        patch_size=14,
        depth_patch_size=7,
        time_patch_size=5,
        representation_size=768,
        num_layers=12,
        num_heads=12,
        projection_size=8192,
        mlp_dim=1024,
        dropout=0.0,
        attention_dropout=0.0,
        mask_prob=0.3,
        patch_prob=0.5,
        student_temp=0.1,
        teacher_cls_temp=0.04,
        teacher_patch_temp=0.07,
        momentum=0.999,
        center_momentum=0.9,
        batch_size=64,
        lr=1e-5,
        tot_epochs=25,
        dataset_size=None,
        tot_steps=100000,
        num_workers=4,
        downstream_epochs=50,
        downstream_batch_size=32,
        segmentation_batch_size=1,
        segmentation_depth=72,
        downstream_lr=1e-4,
        downstream_folds=10,
    ):
        self.max_height = max_height
        self.max_width = max_width
        self.max_depth = max_depth
        self.max_time = max_time
        self.num_channels = num_channels
        self.patch_size = patch_size
        self.depth_patch_size = depth_patch_size
        self.time_patch_size = time_patch_size
        self.representation_size = representation_size
        self.num_layers = num_layers
        self.num_heads = num_heads
        self.projection_size = projection_size
        self.mlp_dim = mlp_dim
        self.dropout = dropout
        self.attention_dropout = attention_dropout
        self.mask_prob = mask_prob
        self.patch_prob = patch_prob
        self.student_temp = student_temp
        self.teacher_cls_temp = teacher_cls_temp
        self.teacher_patch_temp = teacher_patch_temp
        self.momentum = momentum
        self.center_momentum = center_momentum
        self.batch_size = batch_size
        self.lr = lr
        self.tot_epochs = tot_epochs
        self.tot_steps = tot_epochs * dataset_size // batch_size if dataset_size else tot_steps
        self.num_workers = num_workers
        self.downstream_epochs = downstream_epochs
        self.downstream_batch_size = downstream_batch_size
        self.segmentation_batch_size = segmentation_batch_size
        self.segmentation_depth = segmentation_depth
        self.downstream_lr = downstream_lr
        self.downstream_folds = downstream_folds

    def dataset_to_steps(self, dataset_size):
        self.tot_steps = self.tot_epochs * dataset_size // self.batch_size